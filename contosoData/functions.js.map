{"version":3,"file":"functions.js","mappings":"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","sources":["webpack://excel-custom-functions-js/./src/functions/functions.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\n/* global clearInterval, console, setInterval */\n\n/**\n * Get net income (ttm) using given stock ticker\n * @customfunction\n * @param {string} The stock ticker\n * @returns {string} The net income (ttm)\n */\nfunction getNetIncome(ticker) {\n  let normalizedTicker = ticker.toLowerCase();\n  if (normalizedTicker == \"nvda\") {\n    return \"53.10B\";\n  } else if (normalizedTicker == \"tsla\") {\n    return \"12.39B\";\n  } else if (normalizedTicker == \"amzn\") {\n    return \"44.42B\";\n  } else if (normalizedTicker == \"googl\") {\n    return \"87.66B\";\n  } else if (normalizedTicker == \"msft\") {\n    return \"88.14B\";\n  } else if (normalizedTicker == \"ibm\") {\n    return \"8.43B\";\n  } else if (normalizedTicker == \"meta\") {\n    return \"51.43B\";\n  } else if (normalizedTicker == \"baba\") {\n    return \"9.59B\";\n  } else if (normalizedTicker == \"aapl\") {\n    return \"101.96B\";\n  } else if (normalizedTicker == \"crm\") {\n    return \"5.63B\";\n  }\n\n  throw \"Unknow stock ticker\";\n}\n\n/**\n * Get EPS (ttm) using given stock ticker\n * @customfunction\n * @param {string} The stock ticker\n * @returns {number} The EPS (ttm)\n */\nfunction getEPS(ticker) {\n  let normalizedTicker = ticker.toLowerCase();\n  if (normalizedTicker == \"nvda\") {\n    return 2.13;\n  } else if (normalizedTicker == \"tsla\") {\n    return 3.56;\n  } else if (normalizedTicker == \"amzn\") {\n    return 4.18;\n  } else if (normalizedTicker == \"googl\") {\n    return 6.97;\n  } else if (normalizedTicker == \"msft\") {\n    return 11.8;\n  } else if (normalizedTicker == \"ibm\") {\n    return 9.07;\n  } else if (normalizedTicker == \"meta\") {\n    return 19.51;\n  } else if (normalizedTicker == \"baba\") {\n    return 3.8;\n  } else if (normalizedTicker == \"aapl\") {\n    return 6.57;\n  } else if (normalizedTicker == \"crm\") {\n    return 5.74;\n  }\n\n  throw \"Unknow stock ticker\";\n}\n\n/**\n * Get PE Ratio using given stock ticker\n * @customfunction\n * @param {string} The stock ticker\n * @returns {number} The PE Ratio\n */\nfunction getPERatio(ticker) {\n  let normalizedTicker = ticker.toLowerCase();\n  if (normalizedTicker == \"nvda\") {\n    return 54.39;\n  } else if (normalizedTicker == \"tsla\") {\n    return 66.98;\n  } else if (normalizedTicker == \"amzn\") {\n    return 45.81;\n  } else if (normalizedTicker == \"googl\") {\n    return 23.48;\n  } else if (normalizedTicker == \"msft\") {\n    return 36.89;\n  } else if (normalizedTicker == \"ibm\") {\n    return 24.08;\n  } else if (normalizedTicker == \"meta\") {\n    return 28.78;\n  } else if (normalizedTicker == \"baba\") {\n    return 23.21;\n  } else if (normalizedTicker == \"aapl\") {\n    return 34.75;\n  } else if (normalizedTicker == \"crm\") {\n    return 46.45;\n  }\n\n  throw \"Unknow stock ticker\";\n}\n\n/**\n * Get Forward P/E using given stock ticker\n * @customfunction\n * @param {string} The stock ticker\n * @param {CustomFunctions.StreamingInvocation<string>} invocation Custom function invocation\n */\nasync function getForwardPE(ticker, invocation) {\n  let refreshInterval = 3000;\n  let openningPE;\n  let normalizedTicker = ticker.toLowerCase();\n  if (normalizedTicker == \"nvda\") {\n    openningPE = 34.31;\n  } else if (normalizedTicker == \"tsla\") {\n    openningPE = 85.06;\n  } else if (normalizedTicker == \"amzn\") {\n    openningPE = 37.11;\n  } else if (normalizedTicker == \"googl\") {\n    openningPE = 20.37;\n  } else if (normalizedTicker == \"msft\") {\n    openningPE = 33.08;\n  } else if (normalizedTicker == \"ibm\") {\n    openningPE = 21.5;\n  } else if (normalizedTicker == \"meta\") {\n    openningPE = 24.82;\n  } else if (normalizedTicker == \"baba\") {\n    openningPE = 9.74;\n  } else if (normalizedTicker == \"aapl\") {\n    openningPE = 31.53;\n  } else if (normalizedTicker == \"crm\") {\n    openningPE = 25.48;\n  } else {\n    throw \"Unknown stock ticker\";\n  }\n\n  let currentPE = openningPE;\n  const timer = setInterval(async () => {\n    if (Math.random() <= 0.8) {\n      invocation.setResult(parseFloat(currentPE.toFixed(2)));\n      return;\n    }\n\n    let isGrow = Math.random() >= 0.5;\n    let delta = (Math.random() * currentPE) / 100;\n\n    if (isGrow) {\n      currentPE = currentPE + delta;\n    } else {\n      currentPE = currentPE - delta;\n    }\n\n    await sleepRandomly(1);\n    invocation.setResult(parseFloat(currentPE.toFixed(2)));\n  }, refreshInterval);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Get predicted target price using given stock ticker\n * @customfunction\n * @param {string} The stock ticker\n * @param {CustomFunctions.StreamingInvocation<string>} invocation Custom function invocation\n */\nasync function geTargetPrice(ticker, invocation) {\n  let refreshInterval = 3000;\n  let openningPrice = undefined;\n  let normalizedTicker = ticker.toLowerCase();\n  if (normalizedTicker == \"nvda\") {\n    openningPrice = 144.79;\n  } else if (normalizedTicker == \"tsla\") {\n    openningPrice = 207.51;\n  } else if (normalizedTicker == \"amzn\") {\n    openningPrice = 220.59;\n  } else if (normalizedTicker == \"googl\") {\n    openningPrice = 198.03;\n  } else if (normalizedTicker == \"msft\") {\n    openningPrice = 493.97;\n  } else if (normalizedTicker == \"ibm\") {\n    openningPrice = 187.79;\n  } else if (normalizedTicker == \"meta\") {\n    openningPrice = 569.05;\n  } else if (normalizedTicker == \"baba\") {\n    openningPrice = 105.9;\n  } else if (normalizedTicker == \"aapl\") {\n    openningPrice = 242.21;\n  } else if (normalizedTicker == \"crm\") {\n    openningPrice = 306;\n  } else {\n    throw \"Unknow stock ticker\";\n  }\n\n  let currentTarget = openningPrice;\n  const timer = setInterval(async () => {\n    if (Math.random() <= 0.8) {\n      invocation.setResult(parseFloat(currentTarget.toFixed(2)));\n      return;\n    }\n\n    let isGrow = Math.random() >= 0.5;\n    let delta = (Math.random() * currentTarget) / 500;\n\n    if (isGrow) {\n      currentTarget = currentTarget + delta;\n    } else {\n      currentTarget = currentTarget - delta;\n    }\n\n    await sleepRandomly(1);\n    invocation.setResult(parseFloat(currentTarget.toFixed(2)));\n  }, refreshInterval);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Get operation suggestion using given symbols of a stock\n * @customfunction\n * @param {string} The stock ticker\n * @param {string} The Net Incomes\n * @param {number} The EPS\n * @param {number} The PE ratio\n * @param {number} The forwarded P/E\n * @returns {string} The operation suggestion\n */\nfunction getOperationSuggestion(ticker, netInComes, eps, peRatio, forwardedPE) {\n  let normalizedTicker = ticker.toLowerCase();\n  if (normalizedTicker == \"nvda\") {\n    return \"Strong Buy\";\n  } else if (normalizedTicker == \"tsla\") {\n    return \"Hold\";\n  } else if (normalizedTicker == \"amzn\") {\n    return \"Strong Buy\";\n  } else if (normalizedTicker == \"googl\") {\n    return \"Buy\";\n  } else if (normalizedTicker == \"msft\") {\n    return \"Strong Buy\";\n  } else if (normalizedTicker == \"ibm\") {\n    return \"Hold\";\n  } else if (normalizedTicker == \"meta\") {\n    return \"Strong Buy\";\n  } else if (normalizedTicker == \"baba\") {\n    return \"Strong Buy\";\n  } else if (normalizedTicker == \"aapl\") {\n    return \"Buy\";\n  } else if (normalizedTicker == \"crm\") {\n    return \"Buy\";\n  }\n\n  throw \"Unknow stock ticker\";\n}\n\n/**\n * Get revenue history using given stock ticker\n * @customfunction\n * @param {string} The stock ticker\n * @param {CustomFunctions.Invocation} invocation Invocation object.\n * @requiresAddress\n * @returns {string[][]} The revenue history\n */\nasync function getRevenueHistory(ticker, invocation) {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const address = invocation.address;\n  let normalizedTicker = ticker.toLowerCase();\n  let revenues = undefined;\n  if (normalizedTicker == \"nvda\") {\n    revenues = [\n      [\"Quarter Ended\", \"Revenue (B)\", \"Change (B)\", \"Growth\"],\n      [\"07/28/2024\", \"30.04\", \"16.53\", \"122.40%\"],\n      [\"04/28/2024\", \"26.04\", \"18.85\", \"262.12%\"],\n      [\"01/28/2024\", \"22.10\", \"16.05\", \"265.28%\"],\n      [\"10/29/2023\", \"18.12\", \"12.19\", \"205.51%\"],\n      [\"07/30/2023\", \"13.51\", \"6.80\", \"101.48%\"],\n      [\"04/30/2023\", \"7.19\", \"-1.10\", \"-13.22%\"],\n      [\"01/29/2023\", \"6.05\", \"-1.59\", \"-20.83%\"],\n      [\"10/30/2022\", \"5.93\", \"-1.17\", \"-16.50%\"],\n      [\"07/31/2022\", \"6.70\", \"0.197\", \"3.03%\"],\n      [\"05/01/2022\", \"8.29\", \"2.63\", \"46.41%\"],\n      [\"01/30/2022\", \"7.64\", \"2.64\", \"52.77%\"],\n      [\"10/31/2021\", \"7.10\", \"2.38\", \"50.30%\"],\n      [\"08/01/2021\", \"6.51\", \"2.64\", \"68.31%\"],\n      [\"05/02/2021\", \"5.66\", \"2.58\", \"83.80%\"],\n      [\"01/31/2021\", \"5.00\", \"1.90\", \"61.13%\"],\n      [\"10/25/2020\", \"4.73\", \"1.71\", \"56.80%\"],\n      [\"07/26/2020\", \"3.87\", \"1.29\", \"49.90%\"],\n      [\"04/26/2020\", \"3.08\", \"0.860\", \"38.74%\"],\n      [\"01/26/2020\", \"3.11\", \"0.9\", \"40.82%\"],\n      [\"10/27/2019\", \"3.01\", \"-0.167\", \"-5.25%\"],\n    ];\n  } else if (normalizedTicker == \"tsla\") {\n    revenues = [\n      [\"Quarter Ended\", \"Revenue (B)\", \"Change (B)\", \"Growth\"],\n      [\"06/30/2024\", \"25.50\", \"0.573\", \"2.30%\"],\n      [\"03/31/2024\", \"21.30\", \"-2.03\", \"-8.69%\"],\n      [\"12/31/2023\", \"25.17\", \"0.849\", \"3.49%\"],\n      [\"09/30/2023\", \"23.35\", \"1.90\", \"8.84%\"],\n      [\"06/30/2023\", \"24.93\", \"7.99\", \"47.20%\"],\n      [\"03/31/2023\", \"23.33\", \"4.57\", \"24.38%\"],\n      [\"12/31/2022\", \"24.32\", \"6.60\", \"37.24%\"],\n      [\"09/30/2022\", \"21.45\", \"7.70\", \"55.95%\"],\n      [\"06/30/2022\", \"16.93\", \"4.98\", \"41.61%\"],\n      [\"03/31/2022\", \"18.76\", \"8.37\", \"80.54%\"],\n      [\"12/31/2021\", \"17.72\", \"6.98\", \"64.92%\"],\n      [\"09/30/2021\", \"13.76\", \"4.99\", \"56.85%\"],\n      [\"06/30/2021\", \"11.96\", \"5.92\", \"98.11%\"],\n      [\"03/31/2021\", \"10.39\", \"4.40\", \"73.58%\"],\n      [\"12/31/2020\", \"10.74\", \"3.36\", \"45.50%\"],\n      [\"09/30/2020\", \"8.77\", \"2.47\", \"39.16%\"],\n      [\"06/30/2020\", \"6.04\", \"-0.314\", \"-4.94%\"],\n      [\"03/31/2020\", \"5.99\", \"1.44\", \"31.80%\"],\n      [\"12/31/2019\", \"7.38\", \"0.158\", \"2.19%\"],\n      [\"09/30/2019\", \"6.30\", \"-0.521\", \"-7.63%\"],\n    ];\n  } else if (normalizedTicker == \"amzn\") {\n    revenues = [\n      [\"Quarter Ended\", \"Revenue (B)\", \"Change (B)\", \"Growth\"],\n      [\"06/30/2024\", \"147.98\", \"13.59\", \"10.12%\"],\n      [\"03/31/2024\", \"143.31\", \"15.96\", \"12.53%\"],\n      [\"12/31/2023\", \"169.96\", \"20.76\", \"13.91%\"],\n      [\"09/30/2023\", \"143.08\", \"15.98\", \"12.57%\"],\n      [\"06/30/2023\", \"134.38\", \"13.15\", \"10.85%\"],\n      [\"03/31/2023\", \"127.36\", \"10.91\", \"9.37%\"],\n      [\"12/31/2022\", \"149.20\", \"11.79\", \"8.58%\"],\n      [\"09/30/2022\", \"127.10\", \"16.29\", \"14.70%\"],\n      [\"06/30/2022\", \"121.23\", \"8.15\", \"7.21%\"],\n      [\"03/31/2022\", \"116.44\", \"7.93\", \"7.30%\"],\n      [\"12/31/2021\", \"137.41\", \"11.86\", \"9.44%\"],\n      [\"09/30/2021\", \"110.81\", \"14.67\", \"15.26%\"],\n      [\"06/30/2021\", \"113.08\", \"24.17\", \"27.18%\"],\n      [\"03/31/2021\", \"108.52\", \"33.07\", \"43.82%\"],\n      [\"12/31/2020\", \"125.56\", \"38.12\", \"43.60%\"],\n      [\"09/30/2020\", \"96.15\", \"26.16\", \"37.39%\"],\n      [\"06/30/2020\", \"88.91\", \"25.51\", \"40.23%\"],\n      [\"03/31/2020\", \"75.45\", \"15.75\", \"26.39%\"],\n      [\"12/31/2019\", \"87.44\", \"15.05\", \"20.80%\"],\n      [\"09/30/2019\", \"69.98\", \"13.41\", \"23.69%\"],\n    ];\n  }\n\n  if (!revenues) {\n    throw \"Unknow stock ticker\";\n  }\n\n  await sleepRandomly(2, 0.5);\n  return revenues;\n}\n\n/**\n * Get revenue history using given stock ticker\n * @customfunction\n * @param {string} The stock ticker\n * @param {CustomFunctions.Invocation} invocation Invocation object.\n * @requiresAddress\n * @returns {string[][]} The revenue history\n */\nasync function getMarketCapHistory(ticker, invocation) {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const address = invocation.address;\n  let marketCapData = undefined;\n  let normalizedTicker = ticker.toLowerCase();\n  if (normalizedTicker == \"nvda\") {\n    marketCapData = [\n      [\"Date\", \"Market Cap (B)\", \"Change\"],\n      [\"09/30/2024\", \"2,010.95\", \"-0.01%\"],\n      [\"06/30/2024\", \"2,011.08\", \"7.33%\"],\n      [\"03/31/2024\", \"1,873.68\", \"19.33%\"],\n      [\"12/31/2023\", \"1,570.15\", \"19.71%\"],\n      [\"09/30/2023\", \"1,311.59\", \"-1.94%\"],\n      [\"06/30/2023\", \"1,337.54\", \"26.37%\"],\n      [\"03/31/2023\", \"1,058.44\", \"23.51%\"],\n      [\"12/31/2022\", \"856.94\", \"-25.56%\"],\n      [\"09/30/2022\", \"1,151.19\", \"6.53%\"],\n      [\"06/30/2022\", \"1,080.62\", \"-34.86%\"],\n      [\"03/31/2022\", \"1,658.81\", \"-1.90%\"],\n      [\"12/31/2021\", \"1,691.00\", \"1.64%\"],\n      [\"09/30/2021\", \"1,663.68\", \"-4.11%\"],\n      [\"06/30/2021\", \"1,734.95\", \"11.35%\"],\n      [\"03/31/2021\", \"1,558.07\", \"-4.66%\"],\n      [\"12/31/2020\", \"1,634.16\", \"3.61%\"],\n      [\"09/30/2020\", \"1,577.16\", \"14.62%\"],\n      [\"06/30/2020\", \"1,376.03\", \"41.77%\"],\n      [\"03/31/2020\", \"970.59\", \"5.94%\"],\n      [\"12/31/2019\", \"916.15\", \"6.69%\"],\n    ];\n  } else if (normalizedTicker == \"tsla\") {\n    marketCapData = [\n      [\"Date\", \"Market Cap (B)\", \"Change\"],\n      [\"09/30/2024\", \"761.12\", \"20.61%\"],\n      [\"06/30/2024\", \"631.08\", \"12.72%\"],\n      [\"03/31/2024\", \"559.85\", \"-29.12%\"],\n      [\"12/31/2023\", \"789.90\", \"-0.54%\"],\n      [\"09/30/2023\", \"794.20\", \"-4.28%\"],\n      [\"06/30/2023\", \"829.68\", \"26.39%\"],\n      [\"03/31/2023\", \"656.42\", \"68.76%\"],\n      [\"12/31/2022\", \"388.97\", \"-53.20%\"],\n      [\"09/30/2022\", \"831.15\", \"19.13%\"],\n      [\"06/30/2022\", \"697.67\", \"-37.36%\"],\n      [\"03/31/2022\", \"1,113.71\", \"4.94%\"],\n      [\"12/31/2021\", \"1,061.29\", \"38.24%\"],\n      [\"09/30/2021\", \"767.74\", \"17.25%\"],\n      [\"06/30/2021\", \"654.78\", \"2.13%\"],\n      [\"03/31/2021\", \"641.11\", \"-4.15%\"],\n      [\"12/31/2020\", \"668.90\", \"67.33%\"],\n      [\"09/30/2020\", \"399.75\", \"99.71%\"],\n      [\"06/30/2020\", \"200.16\", \"110.65%\"],\n      [\"03/31/2020\", \"95.02\", \"26.02%\"],\n      [\"12/31/2019\", \"75.40\", \"74.76%\"],\n    ];\n  } else if (normalizedTicker == \"amzn\") {\n    marketCapData = [\n      [\"Date\", \"Market Cap (B)\", \"Change\"],\n      [\"09/30/2024\", \"2,010.95\", \"-0.01%\"],\n      [\"06/30/2024\", \"2,011.08\", \"7.33%\"],\n      [\"03/31/2024\", \"1,873.68\", \"19.33%\"],\n      [\"12/31/2023\", \"1,570.15\", \"19.71%\"],\n      [\"09/30/2023\", \"1,311.59\", \"-1.94%\"],\n      [\"06/30/2023\", \"1,337.54\", \"26.37%\"],\n      [\"03/31/2023\", \"1,058.44\", \"23.51%\"],\n      [\"12/31/2022\", \"856.94\", \"-25.56%\"],\n      [\"09/30/2022\", \"1,151.19\", \"6.53%\"],\n      [\"06/30/2022\", \"1,080.62\", \"-34.86%\"],\n      [\"03/31/2022\", \"1,658.81\", \"-1.90%\"],\n      [\"12/31/2021\", \"1,691.00\", \"1.64%\"],\n      [\"09/30/2021\", \"1,663.68\", \"-4.11%\"],\n      [\"06/30/2021\", \"1,734.95\", \"11.35%\"],\n      [\"03/31/2021\", \"1,558.07\", \"-4.66%\"],\n      [\"12/31/2020\", \"1,634.16\", \"3.61%\"],\n      [\"09/30/2020\", \"1,577.16\", \"14.62%\"],\n      [\"06/30/2020\", \"1,376.03\", \"41.77%\"],\n      [\"03/31/2020\", \"970.59\", \"5.94%\"],\n      [\"12/31/2019\", \"916.15\", \"6.69%\"],\n    ];\n  }\n\n  if (!marketCapData) {\n    throw \"Unknow stock ticker\";\n  }\n\n  await sleepRandomly(2, 0.5);\n  return marketCapData;\n}\n\n/**\n * Displays the current stock price in every 1 second\n * @customfunction\n * @param {string} The stock ticker\n * @param {CustomFunctions.StreamingInvocation<string>} invocation Custom function invocation\n */\nfunction getCurrentPrice(ticker, invocation) {\n  const refreshInterval = 1000;\n  let openningPrice = 0;\n  let normalizedTicker = ticker.toLowerCase();\n  if (normalizedTicker == \"nvda\") {\n    openningPrice = 116;\n  } else if (normalizedTicker == \"tsla\") {\n    openningPrice = 238.25;\n  } else if (normalizedTicker == \"amzn\") {\n    openningPrice = 191.6;\n  } else if (normalizedTicker == \"googl\") {\n    openningPrice = 163.59;\n  } else if (normalizedTicker == \"msft\") {\n    openningPrice = 435.27;\n  } else if (normalizedTicker == \"ibm\") {\n    openningPrice = 217.7;\n  } else if (normalizedTicker == \"meta\") {\n    openningPrice = 561.35;\n  } else if (normalizedTicker == \"baba\") {\n    openningPrice = 88.29;\n  } else if (normalizedTicker == \"aapl\") {\n    openningPrice = 228.2;\n  } else if (normalizedTicker == \"crm\") {\n    openningPrice = 266.8;\n  } else {\n    throw \"Unknow stock ticker\";\n  }\n\n  let currentPrice = openningPrice;\n  const timer = setInterval(() => {\n    let isGrow = Math.random() >= 0.5;\n    let delta = (Math.random() * currentPrice) / 100;\n\n    if (isGrow) {\n      currentPrice = currentPrice + delta;\n    } else {\n      currentPrice = currentPrice - delta;\n    }\n\n    invocation.setResult(parseFloat(currentPrice.toFixed(2)));\n  }, refreshInterval);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\nasync function sleepRandomly(prefer, min) {\n  if (!prefer) {\n    prefer = 3;\n  }\n  if (!min) {\n    min = 0.5;\n  }\n  return new Promise((resolver) => {\n    let timeSpan = Math.max(min, Math.random() * prefer);\n    window.setTimeout(() => {\n      resolver();\n    }, timeSpan * 1000);\n  });\n}\n\nCustomFunctions.associate(\"GETNETINCOME\", getNetIncome);\nCustomFunctions.associate(\"GETEPS\", getEPS);\nCustomFunctions.associate(\"GETPERATIO\", getPERatio);\nCustomFunctions.associate(\"GETFORWARDPE\", getForwardPE);\nCustomFunctions.associate(\"GETARGETPRICE\", geTargetPrice);\nCustomFunctions.associate(\"GETOPERATIONSUGGESTION\", getOperationSuggestion);\nCustomFunctions.associate(\"GETREVENUEHISTORY\", getRevenueHistory);\nCustomFunctions.associate(\"GETMARKETCAPHISTORY\", getMarketCapHistory);\nCustomFunctions.associate(\"GETCURRENTPRICE\", getCurrentPrice);"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_getForwardPE","_callee2","ticker","invocation","refreshInterval","openningPE","normalizedTicker","currentPE","timer","_context2","toLowerCase","setInterval","_callee","isGrow","delta","_context","Math","random","setResult","parseFloat","toFixed","sleepRandomly","onCanceled","clearInterval","_geTargetPrice","_callee4","openningPrice","currentTarget","_context4","undefined","_callee3","_context3","_getRevenueHistory","_callee5","revenues","_context5","address","_getMarketCapHistory","_callee6","marketCapData","_context6","_x9","_x10","_sleepRandomly","_callee7","prefer","min","_context7","resolver","timeSpan","max","window","setTimeout","CustomFunctions","associate","_x","_x2","_x3","_x4","netInComes","eps","peRatio","forwardedPE","_x5","_x6","_x7","_x8","currentPrice"],"sourceRoot":""}